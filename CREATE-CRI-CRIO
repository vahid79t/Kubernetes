sudo swapoff -a
sudo vi /etc/fstab
**********************************************************************
sudo ufw disable
**********************************************************************

sudo setenforce 0

/etc/selinux/config
FROM:
SELINUX=enforcing
TO:
SELINUX=disabled

Reboot your system

**********************************************************************
sudo apt-get remove docker docker-engine docker.io
**********************************************************************
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF
**********************************************************************
sudo modprobe overlay
sudo modprobe br_netfilter

**********************************************************************
# sysctl params required by setup, params persist across reboots
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

**********************************************************************
sudo apt install apt-transport-https ca-certificates curl gnupg lsb-release

**********************************************************************
sudo apt-get install \
    ca-certificates \
    curl \
    gnupg \
    lsb-release

*************************************CRI-O****************************

export VERSION=1.24         =====> it should be the version of kuberneties
export OS=xUbuntu_20.04     =====> first check the crio web site or git 

echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/ /" > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
echo "deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/$VERSION/$OS/ /" > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable:cri-o:$VERSION.list

curl -L https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:$VERSION/$OS/Release.key | apt-key add -
curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/Release.key | apt-key add -

apt update && apt install -qq -y cri-o  cri-o-runc cri-tools


for using systemd====> after installing kuberneties

in ubuntu ===>  #vi /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
in centos ===>  /usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf
Environment="KUBELET_CGROUP_ARGS=--cgroup-driver=systemd"
ExecStart=..........................$KUBELET_CGROUP_ARGS
=================>>>>>>>>>>>>>maybe!!!!!!:D
sudo systemctl restart kubelet 

sudo systemctl daemon-reload
sudo systemctl enable crio
sudo systemctl start crio
sudo systemctl status crio
crictl version
crictl info
**********************************************************kuberneties  installation ********************************************

sudo apt-get update

sudo apt-get install -y apt-transport-https ca-certificates curl

sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg

echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list

sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl


**********************************************************************
<<<now  in  master and root sudo su - >>>

sudo kubeadm config images pull
is should be like:
::::::::::::::::::::::::::::::::::::::::::::::::::
  k8s.gcr.io/kube-controller-manager:v1.22.2 \
  k8s.gcr.io/kube-scheduler:v1.22.2 \
  k8s.gcr.io/kube-proxy:v1.22.2 \
  k8s.gcr.io/pause:3.5 \
  k8s.gcr.io/etcd:3.5.0-0 \
  k8s.gcr.io/coredns:1.8.4; do
:::::::::::::::::::::::::::::::::::::::::::::::::::
then:
sudo kubeadm init  --apiserver-advertise-address=192.168.1.85   --pod-network-cidr=10.244.0.0/16  --ignore-preflight-errors=all

**********************************************************************
**********************************************************************
kubectl get cs
if it is not healthy::::::::::::::::::::::::::

vi /etc/kubernetes/manifests/kube-controller-manager.yaml
vi /etc/kubernetes/manifests/kube-scheduler.yaml
then:::::
#  - --port=0

*********************************************************************
<<<now  in  reqular  user>>

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

Alternatively, if you are the root user, you can run:

  export KUBECONFIG=/etc/kubernetes/admin.conf

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join ...........................................................................
**********************************************************************
kubeadm  token  create --print-join-command
join
the:
scp root@192.168.1.85:/etc/kubernetes/admin.conf ~/.kube/config
 
**********************************************************************

kubectl create -f https://projectcalico.docs.tigera.io/manifests/tigera-operator.yaml 
kubectl create -f https://projectcalico.docs.tigera.io/manifests/custom-resources.yaml
watch kubectl get pods -n calico-system
kubectl taint nodes --all node-role.kubernetes.io/master-
kubectl get nodes -o wide
**********************************************************************

then  join other nodes.










